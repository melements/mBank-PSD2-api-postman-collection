{
	"info": {
		"_postman_id": "cb3a382e-c94f-49c9-85bc-cb24d99d75fe",
		"name": "mBank PSD2 API PIS/AIS/CAF/AS",
		"description": "Collection of basic PIS, AIS and CAF requests for mBank PSD2 API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PIS",
			"item": [
				{
					"name": "Immediate transfer",
					"item": [
						{
							"name": "[DOMESTIC] Retrieve authorization URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment');",
											"var uuid = require('uuid');",
											"",
											"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
											"var nextDay = (Date.now() + 86400000);",
											"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
											"pm.globals.set(\"tppConsentId\", uuid.v4());",
											"pm.globals.set(\"state\", require('uuid').v4());",
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"pis\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"pis:domestic\": {\n                    \"domesticPaymentRequest\": {\n                        \"recipient\": {\n                            \"accountNumber\": \"{{recipientAccountNumber}}\",\n                            \"name\": \"Jan Kowalski\",\n                            \"nameAddressStructured\": {\n                                \"addressStructured\": {\n                                    \"countryCode\": \"PL\",\n                                    \"townName\": \"Warszawa\",\n                                    \"townLocationName\": \"\",\n                                    \"districtName\": \"\",\n                                    \"countrySubDivision\": \"\",\n                                    \"postBox\": \"\",\n                                    \"subDepartment\": \"\",\n                                    \"room\": \"\",\n                                    \"buildingName\": \"\",\n                                    \"streetName\": \"Uchwały\",\n                                    \"buildingNumber\": \"1\",\n                                    \"postCode\": \"00-123\",\n                                    \"department\": \"\",\n                                    \"floor\": \"\"\n                                },\n                                \"name\": \"AdresRecipient\"\n                            },\n                            \"identifiers\": {\n                                \"idType\": \"LEI\",\n                                \"idValue\": \"recipientIdValue\",\n                                \"issuer\": \"recipientIssuer\"\n                            },\n                            \"ultimateRecipient\": {\n                                \"nameAddressStructured\": {\n                                    \"name\": \"AdresUltimateRecipient\",\n                                    \"addressStructured\": {\n                                        \"countryCode\": \"PL\",\n                                        \"townName\": \"Częstochowa\",\n                                        \"townLocationName\": \"\",\n                                        \"districtName\": \"\",\n                                        \"countrySubDivision\": \"\",\n                                        \"postBox\": \"\",\n                                        \"subDepartment\": \"\",\n                                        \"room\": \"\",\n                                        \"buildingName\": \"\",\n                                        \"streetName\": \"Czysta\",\n                                        \"buildingNumber\": \"51\",\n                                        \"postCode\": \"42-202\",\n                                        \"department\": \"\",\n                                        \"floor\": \"\"\n                                    }\n                                },\n                                \"identifiers\": {\n                                    \"idType\": \"LEI\",\n                                    \"idValue\": \"ultimateRecipientIdValue\",\n                                    \"issuer\": \"ultimateRecipientIssuer\"\n                                }\n                            }\n                        },\n                        \"sender\": {},\n                        \"transferData\": {\n                            \"description\": \"Transfer\",\n                            \"amount\": \"0.01\",\n                            \"currency\": \"{{currency}}\"\n                        },\n                        \"deliveryMode\": \"STANDARD_D1\"\n                    }\n                }\n            }\n        ],\n        \"scopeGroupType\": \"PIS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC] Retrieve accessToken for payment inititation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_id\": \"{{clientId}}\",\n    \"code\": \"{{authorizationCode}}\",\n    \"grant_type\": \"authorization_code\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC] Initiate domestic payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"statusUrl\", jsonData.links[0].href);",
											"",
											"var aspspPaymentIdRegex = \"([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\"",
											"var aspspPaymentIdMatches = jsonData.links[0].href.match(aspspPaymentIdRegex)",
											"postman.setGlobalVariable(\"aspspPaymentId\", aspspPaymentIdMatches[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Payment-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"recipient\": {\n        \"accountNumber\": \"{{recipientAccountNumber}}\",\n        \"name\": \"Jan Kowalski\",\n        \"nameAddressStructured\": {\n            \"addressStructured\": {\n                \"countryCode\": \"PL\",\n                \"townName\": \"Warszawa\",\n                \"townLocationName\": \"\",\n                \"districtName\": \"\",\n                \"countrySubDivision\": \"\",\n                \"postBox\": \"\",\n                \"subDepartment\": \"\",\n                \"room\": \"\",\n                \"buildingName\": \"\",\n                \"streetName\": \"Uchwały\",\n                \"buildingNumber\": \"1\",\n                \"postCode\": \"00-123\",\n                \"department\": \"\",\n                \"floor\": \"\"\n            },\n            \"name\": \"AdresRecipient\"\n        },\n        \"identifiers\": {\n            \"idType\": \"LEI\",\n            \"idValue\": \"recipientIdValue\",\n            \"issuer\": \"recipientIssuer\"\n        },\n        \"ultimateRecipient\": {\n            \"nameAddressStructured\": {\n                \"name\": \"AdresUltimateRecipient\",\n                \"addressStructured\": {\n                    \"countryCode\": \"PL\",\n                    \"townName\": \"Częstochowa\",\n                    \"townLocationName\": \"\",\n                    \"districtName\": \"\",\n                    \"countrySubDivision\": \"\",\n                    \"postBox\": \"\",\n                    \"subDepartment\": \"\",\n                    \"room\": \"\",\n                    \"buildingName\": \"\",\n                    \"streetName\": \"Czysta\",\n                    \"buildingNumber\": \"51\",\n                    \"postCode\": \"42-202\",\n                    \"department\": \"\",\n                    \"floor\": \"\"\n                }\n            },\n            \"identifiers\": {\n                \"idType\": \"LEI\",\n                \"idValue\": \"ultimateRecipientIdValue\",\n                \"issuer\": \"ultimateRecipientIssuer\"\n            }\n        }\n    },\n    \"sender\": {},\n    \"transferData\": {\n        \"description\": \"Transfer\",\n        \"amount\": \"0.01\",\n        \"currency\": \"{{currency}}\"\n    },\n    \"deliveryMode\": \"STANDARD_D1\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/payments/domestic",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"payments",
										"domestic"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC] Retrieve accessToken for payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);",
											"console.log(jsonData.access_token)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"{{refreshToken}}\",\n    \"grant_type\": \"refresh_token\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC] Retrieve payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-ID",
										"value": "{{clientId}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "en",
										"type": "text"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}",
										"type": "text"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}",
										"type": "text"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{xs2aUri}}{{statusUrl}}",
									"host": [
										"{{xs2aUri}}{{statusUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Recurring transfer + cancellation",
					"item": [
						{
							"name": "[DOMESTIC RECURRING] Retrieve authorization URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment');",
											"var uuid = require('uuid');",
											"",
											"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
											"var nextDay = (Date.now() + 86400000);",
											"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
											"pm.globals.set(\"tppConsentId\", uuid.v4());",
											"pm.globals.set(\"state\", require('uuid').v4());",
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"pis\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"pis:domestic\": {\n                    \"domesticPaymentRequest\": {\n                        \"recipient\": {\n                            \"accountNumber\": \"{{recipientAccountNumber}}\",\n                            \"name\": \"Jan Kowalski\",\n                            \"nameAddressStructured\": {\n                                \"addressStructured\": {\n                                    \"countryCode\": \"PL\",\n                                    \"townName\": \"Warszawa\",\n                                    \"townLocationName\": \"\",\n                                    \"districtName\": \"\",\n                                    \"countrySubDivision\": \"\",\n                                    \"postBox\": \"\",\n                                    \"subDepartment\": \"\",\n                                    \"room\": \"\",\n                                    \"buildingName\": \"\",\n                                    \"streetName\": \"Uchwały\",\n                                    \"buildingNumber\": \"1\",\n                                    \"postCode\": \"00-123\",\n                                    \"department\": \"\",\n                                    \"floor\": \"\"\n                                },\n                                \"name\": \"AdresRecipient\"\n                            },\n                            \"identifiers\": {\n                                \"idType\": \"LEI\",\n                                \"idValue\": \"recipientIdValue\",\n                                \"issuer\": \"recipientIssuer\"\n                            },\n                            \"ultimateRecipient\": {\n                                \"nameAddressStructured\": {\n                                    \"name\": \"AdresUltimateRecipient\",\n                                    \"addressStructured\": {\n                                        \"countryCode\": \"PL\",\n                                        \"townName\": \"Częstochowa\",\n                                        \"townLocationName\": \"\",\n                                        \"districtName\": \"\",\n                                        \"countrySubDivision\": \"\",\n                                        \"postBox\": \"\",\n                                        \"subDepartment\": \"\",\n                                        \"room\": \"\",\n                                        \"buildingName\": \"\",\n                                        \"streetName\": \"Czysta\",\n                                        \"buildingNumber\": \"51\",\n                                        \"postCode\": \"42-202\",\n                                        \"department\": \"\",\n                                        \"floor\": \"\"\n                                    }\n                                },\n                                \"identifiers\": {\n                                    \"idType\": \"LEI\",\n                                    \"idValue\": \"ultimateRecipientIdValue\",\n                                    \"issuer\": \"ultimateRecipientIssuer\"\n                                }\n                            }\n                        },\n                        \"sender\": {},\n                        \"transferData\": {\n                            \"description\": \"Transfer\",\n                            \"amount\": \"0.01\",\n                            \"currency\": \"{{currency}}\",\n                            \"recurrence\": {\n                                \"startDate\": \"2018-07-26\",\n                                \"frequency\": {\n                                    \"periodType\": \"WEEK\",\n                                    \"periodValue\": 1\n                                },\n                                \"endDate\": \"2025-07-26\",\n                                \"dayOffOffsetType\": \"BEFORE\"\n                            }\n                        },\n                        \"deliveryMode\": \"STANDARD_D1\",\n                        \"executionMode\": \"RECURRING\"\n                    }\n                }\n            }\n        ],\n        \"scopeGroupType\": \"PIS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC RECURRING] Retrieve accessToken for payment inititation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_id\": \"{{clientId}}\",\n    \"code\": \"{{authorizationCode}}\",\n    \"grant_type\": \"authorization_code\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC RECURRING] Initiate domestic payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"statusUrl\", jsonData.links[0].href);",
											"",
											"var aspspPaymentIdRegex = \"([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\"",
											"var aspspPaymentIdMatches = jsonData.links[0].href.match(aspspPaymentIdRegex)",
											"postman.setGlobalVariable(\"aspspPaymentId\", aspspPaymentIdMatches[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Payment-ID",
										"value": "test-15-{{tppRequestId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"recipient\": {\n        \"accountNumber\": \"{{recipientAccountNumber}}\",\n        \"name\": \"Jan Kowalski\",\n        \"nameAddressStructured\": {\n            \"addressStructured\": {\n                \"countryCode\": \"PL\",\n                \"townName\": \"Warszawa\",\n                \"townLocationName\": \"\",\n                \"districtName\": \"\",\n                \"countrySubDivision\": \"\",\n                \"postBox\": \"\",\n                \"subDepartment\": \"\",\n                \"room\": \"\",\n                \"buildingName\": \"\",\n                \"streetName\": \"Uchwały\",\n                \"buildingNumber\": \"1\",\n                \"postCode\": \"00-123\",\n                \"department\": \"\",\n                \"floor\": \"\"\n            },\n            \"name\": \"AdresRecipient\"\n        },\n        \"identifiers\": {\n            \"idType\": \"LEI\",\n            \"idValue\": \"recipientIdValue\",\n            \"issuer\": \"recipientIssuer\"\n        },\n        \"ultimateRecipient\": {\n            \"nameAddressStructured\": {\n                \"name\": \"AdresUltimateRecipient\",\n                \"addressStructured\": {\n                    \"countryCode\": \"PL\",\n                    \"townName\": \"Częstochowa\",\n                    \"townLocationName\": \"\",\n                    \"districtName\": \"\",\n                    \"countrySubDivision\": \"\",\n                    \"postBox\": \"\",\n                    \"subDepartment\": \"\",\n                    \"room\": \"\",\n                    \"buildingName\": \"\",\n                    \"streetName\": \"Czysta\",\n                    \"buildingNumber\": \"51\",\n                    \"postCode\": \"42-202\",\n                    \"department\": \"\",\n                    \"floor\": \"\"\n                }\n            },\n            \"identifiers\": {\n                \"idType\": \"LEI\",\n                \"idValue\": \"ultimateRecipientIdValue\",\n                \"issuer\": \"ultimateRecipientIssuer\"\n            }\n        }\n    },\n    \"sender\": {},\n    \"transferData\": {\n        \"description\": \"Transfer\",\n        \"amount\": \"0.01\",\n        \"currency\": \"{{currency}}\",\n        \"recurrence\": {\n            \"startDate\": \"2018-07-26\",\n            \"frequency\": {\n                \"periodType\": \"WEEK\",\n                \"periodValue\": 1\n            },\n            \"endDate\": \"2025-07-26\",\n            \"dayOffOffsetType\": \"BEFORE\"\n        }\n    },\n    \"deliveryMode\": \"STANDARD_D1\",\n    \"executionMode\": \"RECURRING\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/payments/domestic",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"payments",
										"domestic"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC RECURRING] Retrieve accessToken for payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);",
											"console.log(jsonData.access_token)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"{{refreshToken}}\",\n    \"grant_type\": \"refresh_token\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC RECURRING] Retrieve payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{xs2aUri}}{{statusUrl}}",
									"host": [
										"{{xs2aUri}}{{statusUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CANCELLATION] Retrieve authorization URI for payment cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment');",
											"var uuid = require('uuid');",
											"",
											"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
											"var nextDay = (Date.now() + 86400000);",
											"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
											"pm.globals.set(\"tppConsentIdForCancellation\", uuid.v4());",
											"pm.globals.set(\"state\", require('uuid').v4());",
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"pis\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"pis:cancelPayment\": {\n                    \"aspspPaymentId\": \"{{aspspPaymentId}}\"\n                }\n            }\n        ],\n        \"scopeGroupType\": \"PIS\",\n        \"consentId\": \"{{tppConsentIdForCancellation}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CANCELLATION] Retrieve accessToken for payment cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessTokenForCancellation\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshTokenForCancellation\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_id\": \"{{clientId}}\",\n    \"code\": \"{{authorizationCode}}\",\n    \"grant_type\": \"authorization_code\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CANCELLATION] Cancel payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"statusUrl\", jsonData.links[0].href);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessTokenForCancellation}}"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Payment-ID",
										"value": "test-15-{{tppRequestId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/payments/domestic/{{aspspPaymentId}}",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"payments",
										"domestic",
										"{{aspspPaymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC RECURRING] Retrieve payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{xs2aUri}}{{statusUrl}}",
									"host": [
										"{{xs2aUri}}{{statusUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Payment bundle + cancellation",
					"item": [
						{
							"name": "[DOMESTIC BUNDLE] Retrieve authorization URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment');",
											"var uuid = require('uuid');",
											"",
											"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
											"var nextDay = (Date.now() + 86400000);",
											"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
											"pm.globals.set(\"tppConsentId\", uuid.v4());",
											"pm.globals.set(\"state\", require('uuid').v4());",
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"pis\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"pis:bundle-domestic\": {\n                    \"bundleDomesticPaymentsRequest\": {\n                        \"transfersTotalAmount\": \"0.03\",\n                        \"transfers\": [\n                            {\n                                \"tppPaymentId\": \"341126ea-77d8-11e9-968a-27f355b781a4\",\n                                \"recipient\": {\n                                    \"accountNumber\": \"{{recipientAccountNumber}}\",\n                                    \"name\": \"Jan Kowalski\",\n                                    \"nameAddressStructured\": {\n                                        \"addressStructured\": {\n                                            \"countryCode\": \"PL\",\n                                            \"townName\": \"Warszawa\",\n                                            \"townLocationName\": \"\",\n                                            \"districtName\": \"\",\n                                            \"countrySubDivision\": \"\",\n                                            \"postBox\": \"\",\n                                            \"subDepartment\": \"\",\n                                            \"room\": \"\",\n                                            \"buildingName\": \"\",\n                                            \"streetName\": \"Uchwały\",\n                                            \"buildingNumber\": \"1\",\n                                            \"postCode\": \"00-123\",\n                                            \"department\": \"\",\n                                            \"floor\": \"\"\n                                        },\n                                        \"name\": \"AdresRecipient\"\n                                    },\n                                    \"identifiers\": {\n                                        \"idType\": \"LEI\",\n                                        \"idValue\": \"recipientIdValue\",\n                                        \"issuer\": \"recipientIssuer\"\n                                    },\n                                    \"ultimateRecipient\": {\n                                        \"nameAddressStructured\": {\n                                            \"name\": \"AdresUltimateRecipient\",\n                                            \"addressStructured\": {\n                                                \"countryCode\": \"PL\",\n                                                \"townName\": \"Częstochowa\",\n                                                \"townLocationName\": \"\",\n                                                \"districtName\": \"\",\n                                                \"countrySubDivision\": \"\",\n                                                \"postBox\": \"\",\n                                                \"subDepartment\": \"\",\n                                                \"room\": \"\",\n                                                \"buildingName\": \"\",\n                                                \"streetName\": \"Czysta\",\n                                                \"buildingNumber\": \"51\",\n                                                \"postCode\": \"42-202\",\n                                                \"department\": \"\",\n                                                \"floor\": \"\"\n                                            }\n                                        },\n                                        \"identifiers\": {\n                                            \"idType\": \"LEI\",\n                                            \"idValue\": \"ultimateRecipientIdValue\",\n                                            \"issuer\": \"ultimateRecipientIssuer\"\n                                        }\n                                    }\n                                },\n                                \"sender\": {},\n                                \"transferData\": {\n                                    \"description\": \"Transfer\",\n                                    \"amount\": \"0.01\",\n                                    \"currency\": \"{{currency}}\"\n                                },\n                                \"deliveryMode\": \"STANDARD_D1\"\n                            },\n                            {\n                                \"tppPaymentId\": \"3863ac7c-77d8-11e9-95c7-2b8b94df59b3\",\n                                \"recipient\": {\n                                    \"accountNumber\": \"{{recipientAccountNumber_2}}\",\n                                    \"name\": \"Natalia Kołodziej\",\n                                    \"nameAddressStructured\": {\n                                        \"addressStructured\": {\n                                            \"countryCode\": \"PL\",\n                                            \"townName\": \"Warszawa\",\n                                            \"townLocationName\": \"\",\n                                            \"districtName\": \"\",\n                                            \"countrySubDivision\": \"\",\n                                            \"postBox\": \"\",\n                                            \"subDepartment\": \"\",\n                                            \"room\": \"\",\n                                            \"buildingName\": \"\",\n                                            \"streetName\": \"Polska\",\n                                            \"buildingNumber\": \"2\",\n                                            \"postCode\": \"00-123\",\n                                            \"department\": \"\",\n                                            \"floor\": \"\"\n                                        },\n                                        \"name\": \"AdresRecipient\"\n                                    },\n                                    \"identifiers\": {\n                                        \"idType\": \"LEI\",\n                                        \"idValue\": \"recipientIdValue\",\n                                        \"issuer\": \"recipientIssuer\"\n                                    },\n                                    \"ultimateRecipient\": {\n                                        \"nameAddressStructured\": {\n                                            \"name\": \"AdresUltimateRecipient\",\n                                            \"addressStructured\": {\n                                                \"countryCode\": \"PL\",\n                                                \"townName\": \"Częstochowa\",\n                                                \"townLocationName\": \"\",\n                                                \"districtName\": \"\",\n                                                \"countrySubDivision\": \"\",\n                                                \"postBox\": \"\",\n                                                \"subDepartment\": \"\",\n                                                \"room\": \"\",\n                                                \"buildingName\": \"\",\n                                                \"streetName\": \"Czysta\",\n                                                \"buildingNumber\": \"51\",\n                                                \"postCode\": \"42-202\",\n                                                \"department\": \"\",\n                                                \"floor\": \"\"\n                                            }\n                                        },\n                                        \"identifiers\": {\n                                            \"idType\": \"LEI\",\n                                            \"idValue\": \"ultimateRecipientIdValue\",\n                                            \"issuer\": \"ultimateRecipientIssuer\"\n                                        }\n                                    }\n                                },\n                                \"sender\": {},\n                                \"transferData\": {\n                                    \"description\": \"Transfer\",\n                                    \"amount\": \"0.02\",\n                                    \"currency\": \"{{currency}}\"\n                                },\n                                \"deliveryMode\": \"STANDARD_D1\"\n                            }\n                        ]\n                    }\n                }\n            }\n        ],\n        \"scopeGroupType\": \"PIS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC BUNDLE] Retrieve accessToken for bundle payments inititation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_id\": \"{{clientId}}\",\n    \"code\": \"{{authorizationCode}}\",\n    \"grant_type\": \"authorization_code\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC BUNDLE] Initiate domestic bundle payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"statusUrl\", jsonData.links[0].href);",
											"",
											"var aspspBundleIdRegex = \"([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\"",
											"var aspspBundleIdMatches = jsonData.links[0].href.match(aspspBundleIdRegex)",
											"postman.setGlobalVariable(\"aspspBundleId\", aspspBundleIdMatches[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-Bundle-ID",
										"value": "{{tppRequestId}}",
										"type": "text"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transfersTotalAmount\": \"0.03\",\n    \"transfers\": [\n        {\n            \"tppPaymentId\": \"341126ea-77d8-11e9-968a-27f355b781a4\",\n            \"recipient\": {\n                \"accountNumber\": \"{{recipientAccountNumber}}\",\n                \"name\": \"Jan Kowalski\",\n                \"nameAddressStructured\": {\n                    \"addressStructured\": {\n                        \"countryCode\": \"PL\",\n                        \"townName\": \"Warszawa\",\n                        \"townLocationName\": \"\",\n                        \"districtName\": \"\",\n                        \"countrySubDivision\": \"\",\n                        \"postBox\": \"\",\n                        \"subDepartment\": \"\",\n                        \"room\": \"\",\n                        \"buildingName\": \"\",\n                        \"streetName\": \"Uchwały\",\n                        \"buildingNumber\": \"1\",\n                        \"postCode\": \"00-123\",\n                        \"department\": \"\",\n                        \"floor\": \"\"\n                    },\n                    \"name\": \"AdresRecipient\"\n                },\n                \"identifiers\": {\n                    \"idType\": \"LEI\",\n                    \"idValue\": \"recipientIdValue\",\n                    \"issuer\": \"recipientIssuer\"\n                },\n                \"ultimateRecipient\": {\n                    \"nameAddressStructured\": {\n                        \"name\": \"AdresUltimateRecipient\",\n                        \"addressStructured\": {\n                            \"countryCode\": \"PL\",\n                            \"townName\": \"Częstochowa\",\n                            \"townLocationName\": \"\",\n                            \"districtName\": \"\",\n                            \"countrySubDivision\": \"\",\n                            \"postBox\": \"\",\n                            \"subDepartment\": \"\",\n                            \"room\": \"\",\n                            \"buildingName\": \"\",\n                            \"streetName\": \"Czysta\",\n                            \"buildingNumber\": \"51\",\n                            \"postCode\": \"42-202\",\n                            \"department\": \"\",\n                            \"floor\": \"\"\n                        }\n                    },\n                    \"identifiers\": {\n                        \"idType\": \"LEI\",\n                        \"idValue\": \"ultimateRecipientIdValue\",\n                        \"issuer\": \"ultimateRecipientIssuer\"\n                    }\n                }\n            },\n            \"sender\": {},\n            \"transferData\": {\n                \"description\": \"Transfer\",\n                \"amount\": \"0.01\",\n                \"currency\": \"{{currency}}\"\n            },\n            \"deliveryMode\": \"STANDARD_D1\"\n        },\n        {\n            \"tppPaymentId\": \"3863ac7c-77d8-11e9-95c7-2b8b94df59b3\",\n            \"recipient\": {\n                \"accountNumber\": \"{{recipientAccountNumber_2}}\",\n                \"name\": \"Natalia Kołodziej\",\n                \"nameAddressStructured\": {\n                    \"addressStructured\": {\n                        \"countryCode\": \"PL\",\n                        \"townName\": \"Warszawa\",\n                        \"townLocationName\": \"\",\n                        \"districtName\": \"\",\n                        \"countrySubDivision\": \"\",\n                        \"postBox\": \"\",\n                        \"subDepartment\": \"\",\n                        \"room\": \"\",\n                        \"buildingName\": \"\",\n                        \"streetName\": \"Polska\",\n                        \"buildingNumber\": \"2\",\n                        \"postCode\": \"00-123\",\n                        \"department\": \"\",\n                        \"floor\": \"\"\n                    },\n                    \"name\": \"AdresRecipient\"\n                },\n                \"identifiers\": {\n                    \"idType\": \"LEI\",\n                    \"idValue\": \"recipientIdValue\",\n                    \"issuer\": \"recipientIssuer\"\n                },\n                \"ultimateRecipient\": {\n                    \"nameAddressStructured\": {\n                        \"name\": \"AdresUltimateRecipient\",\n                        \"addressStructured\": {\n                            \"countryCode\": \"PL\",\n                            \"townName\": \"Częstochowa\",\n                            \"townLocationName\": \"\",\n                            \"districtName\": \"\",\n                            \"countrySubDivision\": \"\",\n                            \"postBox\": \"\",\n                            \"subDepartment\": \"\",\n                            \"room\": \"\",\n                            \"buildingName\": \"\",\n                            \"streetName\": \"Czysta\",\n                            \"buildingNumber\": \"51\",\n                            \"postCode\": \"42-202\",\n                            \"department\": \"\",\n                            \"floor\": \"\"\n                        }\n                    },\n                    \"identifiers\": {\n                        \"idType\": \"LEI\",\n                        \"idValue\": \"ultimateRecipientIdValue\",\n                        \"issuer\": \"ultimateRecipientIssuer\"\n                    }\n                }\n            },\n            \"sender\": {},\n            \"transferData\": {\n                \"description\": \"Transfer\",\n                \"amount\": \"0.02\",\n                \"currency\": \"{{currency}}\"\n            },\n            \"deliveryMode\": \"STANDARD_D1\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/payments/bundle/domestic",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"payments",
										"bundle",
										"domestic"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC BUNDLE] Retrieve accessToken for bundle payments status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);",
											"console.log(jsonData.access_token)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"{{refreshToken}}\",\n    \"grant_type\": \"refresh_token\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC BUNDLE] Retrieve bundle payments status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{xs2aUri}}{{statusUrl}}?transactionsIncluded=true",
									"host": [
										"{{xs2aUri}}{{statusUrl}}"
									],
									"query": [
										{
											"key": "transactionsIncluded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[CANCELLATION] Retrieve authorization URI for bundle payments cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment');",
											"var uuid = require('uuid');",
											"",
											"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
											"var nextDay = (Date.now() + 86400000);",
											"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
											"pm.globals.set(\"tppConsentId\", uuid.v4());",
											"pm.globals.set(\"state\", require('uuid').v4());",
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"pis\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"pis:cancelBundlePayments\": {\n                    \"aspspBundleId\": \"{{aspspBundleId}}\"\n                }\n            }\n        ],\n        \"scopeGroupType\": \"PIS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CANCELLATION] Retrieve accessToken for bundle payments cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessTokenForCancellation\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshTokenForCancellation\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_id\": \"{{clientId}}\",\n    \"code\": \"{{authorizationCode}}\",\n    \"grant_type\": \"authorization_code\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[CANCELLATION] Cancel bundle payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"statusUrl\", jsonData.links[0].href);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessTokenForCancellation}}"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Payment-ID",
										"value": "test-15-{{tppRequestId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/payments/bundle/domestic/{{aspspBundleId}}",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"payments",
										"bundle",
										"domestic",
										"{{aspspBundleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[DOMESTIC BUNDLE] Retrieve bundle payments status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{xs2aUri}}{{statusUrl}}?transactionsIncluded=true",
									"host": [
										"{{xs2aUri}}{{statusUrl}}"
									],
									"query": [
										{
											"key": "transactionsIncluded",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Split payment",
					"item": [
						{
							"name": "[SPLIT PAYMENT] Retrieve authorization URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment');",
											"var uuid = require('uuid');",
											"",
											"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
											"var nextDay = (Date.now() + 86400000);",
											"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
											"pm.globals.set(\"tppConsentId\", uuid.v4());",
											"",
											"pm.globals.set(\"state\", require('uuid').v4());",
											"",
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "Send-Date",
										"value": "{{sendDate}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"pis\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"pis:domestic\": {\n                    \"scopeUsageLimit\": \"SINGLE\",\n                    \"domesticPaymentRequest\": {\n                        \"recipient\": {\n                            \"accountNumber\": \"{{recipientAccountNumber}}\",\n                            \"name\": \"Jan Kowalski\",\n                            \"nameAddressStructured\": {\n                                \"addressStructured\": {\n                                    \"countryCode\": \"PL\",\n                                    \"townName\": \"Warszawa\",\n                                    \"townLocationName\": \"\",\n                                    \"districtName\": \"\",\n                                    \"countrySubDivision\": \"\",\n                                    \"postBox\": \"\",\n                                    \"subDepartment\": \"\",\n                                    \"room\": \"\",\n                                    \"buildingName\": \"\",\n                                    \"streetName\": \"Uchwały\",\n                                    \"buildingNumber\": \"1\",\n                                    \"postCode\": \"00-123\",\n                                    \"department\": \"\",\n                                    \"floor\": \"\"\n                                },\n                                \"name\": \"AdresRecipient\"\n                            },\n                            \"identifiers\": {\n                                \"idType\": \"LEI\",\n                                \"idValue\": \"recipientIdValue\",\n                                \"issuer\": \"recipientIssuer\"\n                            },\n                            \"ultimateRecipient\": {\n                                \"nameAddressStructured\": {\n                                    \"name\": \"AdresUltimateRecipient\",\n                                    \"addressStructured\": {\n                                        \"countryCode\": \"PL\",\n                                        \"townName\": \"Częstochowa\",\n                                        \"townLocationName\": \"\",\n                                        \"districtName\": \"\",\n                                        \"countrySubDivision\": \"\",\n                                        \"postBox\": \"\",\n                                        \"subDepartment\": \"\",\n                                        \"room\": \"\",\n                                        \"buildingName\": \"\",\n                                        \"streetName\": \"Czysta\",\n                                        \"buildingNumber\": \"51\",\n                                        \"postCode\": \"42-202\",\n                                        \"department\": \"\",\n                                        \"floor\": \"\"\n                                    }\n                                },\n                                \"identifiers\": {\n                                    \"idType\": \"LEI\",\n                                    \"idValue\": \"ultimateRecipientIdValue\",\n                                    \"issuer\": \"ultimateRecipientIssuer\"\n                                }\n                            }\n                        },\n                        \"sender\": {\n                            \"accountNumber\": \"{{senderAccountNumber}}\",\n                            \"name\": \"Adam Nowak\",\n                            \"nameAddressStructured\": {\n                                \"addressStructured\": {\n                                    \"countryCode\": \"PL\",\n                                    \"townName\": \"Warszawa\",\n                                    \"townLocationName\": \"\",\n                                    \"districtName\": \"\",\n                                    \"countrySubDivision\": \"\",\n                                    \"postBox\": \"\",\n                                    \"subDepartment\": \"\",\n                                    \"room\": \"\",\n                                    \"buildingName\": \"\",\n                                    \"streetName\": \"Ustawy\",\n                                    \"buildingNumber\": \"4\",\n                                    \"postCode\": \"00-123\",\n                                    \"department\": \"\",\n                                    \"floor\": \"\"\n                                },\n                                \"name\": \"AdresSender\"\n                            },\n                            \"identifiers\": {\n                                \"idType\": \"LEI\",\n                                \"idValue\": \"senderIdValue\",\n                                \"issuer\": \"senderIssuer\"\n                            },\n                            \"ultimateSender\": {\n                                \"nameAddressStructured\": {\n                                    \"name\": \"AdresUltimateSender\",\n                                    \"addressStructured\": {\n                                        \"countryCode\": \"PL\",\n                                        \"townName\": \"Kielce\",\n                                        \"townLocationName\": \"\",\n                                        \"districtName\": \"\",\n                                        \"countrySubDivision\": \"\",\n                                        \"postBox\": \"\",\n                                        \"subDepartment\": \"\",\n                                        \"room\": \"\",\n                                        \"buildingName\": \"\",\n                                        \"streetName\": \"Wrzosowa\",\n                                        \"buildingNumber\": \"3\",\n                                        \"postCode\": \"25-211\",\n                                        \"department\": \"\",\n                                        \"floor\": \"\"\n                                    }\n                                },\n                                \"identifiers\": {\n                                    \"idType\": \"LEI\",\n                                    \"idValue\": \"ultimateSenderIdValue\",\n                                    \"issuer\": \"ultimateSenderIssuer\"\n                                }\n                            }\n                        },\n                        \"transferData\": {\n                            \"description\": \"Transfer\",\n                            \"amount\": \"0.01\",\n                            \"executionDate\": \"{{executionDate}}\",\n                            \"currency\": \"{{currency}}\",\n                            \"additionalFields\": {\n                                \"bicOrSwift\": \"DABAIE2D\",\n                                \"reference\": \"dummy-reference\",\n                                \"KS\": \"1234\",\n                                \"VS\": \"5678\",\n                                \"SS\": \"90\"\n                            }\n                        },\n                        \"deliveryMode\": \"STANDARD_D1\",\n                        \"system\": \"ELIXIR\",\n                        \"hold\": false,\n                        \"executionMode\": \"IMMEDIATE\",\n                        \"splitPayment\": true,\n                        \"transactionInfoSp\": {\n                            \"spInvoiceNumber\": \"FVS-01-01-2020-0001\",\n                            \"spTaxIdentificationNumber\": \"5512265909\",\n                            \"spTaxAmount\": \"0.23\",\n                            \"spDescription\": \"Split payment\"\n                        }\n                    }\n                }\n            }\n        ],\n        \"scopeGroupType\": \"PIS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"authorize"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPLIT PAYMENT] Retrieve accessToken for payment inititation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "Send-Date",
										"value": "{{sendDate}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0.",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87",
										"type": "text"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"{{clientId}}\",\n  \"code\": \"{{authorizationCode}}\",\n  \"grant_type\": \"authorization_code\",\n  \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPLIT PAYMENT] Initiate domestic payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"statusUrl\", jsonData.links[0].href);",
											"",
											"var aspspPaymentIdRegex = \"([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\"",
											"var aspspPaymentIdMatches = jsonData.links[0].href.match(aspspPaymentIdRegex)",
											"postman.setGlobalVariable(\"aspspPaymentId\", aspspPaymentIdMatches[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}"
									},
									{
										"key": "TPP-Payment-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "Send-Date",
										"value": "{{sendDate}}",
										"type": "text"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456",
										"type": "text"
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87",
										"type": "text"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"recipient\": {\n        \"accountNumber\": \"{{recipientAccountNumber}}\",\n        \"name\": \"Jan Kowalski\",\n        \"nameAddressStructured\": {\n            \"addressStructured\": {\n                \"countryCode\": \"PL\",\n                \"townName\": \"Warszawa\",\n                \"townLocationName\": \"\",\n                \"districtName\": \"\",\n                \"countrySubDivision\": \"\",\n                \"postBox\": \"\",\n                \"subDepartment\": \"\",\n                \"room\": \"\",\n                \"buildingName\": \"\",\n                \"streetName\": \"Uchwały\",\n                \"buildingNumber\": \"1\",\n                \"postCode\": \"00-123\",\n                \"department\": \"\",\n                \"floor\": \"\"\n            },\n            \"name\": \"AdresRecipient\"\n        },\n        \"identifiers\": {\n            \"idType\": \"LEI\",\n            \"idValue\": \"recipientIdValue\",\n            \"issuer\": \"recipientIssuer\"\n        },\n        \"ultimateRecipient\": {\n            \"nameAddressStructured\": {\n                \"name\": \"AdresUltimateRecipient\",\n                \"addressStructured\": {\n                    \"countryCode\": \"PL\",\n                    \"townName\": \"Częstochowa\",\n                    \"townLocationName\": \"\",\n                    \"districtName\": \"\",\n                    \"countrySubDivision\": \"\",\n                    \"postBox\": \"\",\n                    \"subDepartment\": \"\",\n                    \"room\": \"\",\n                    \"buildingName\": \"\",\n                    \"streetName\": \"Czysta\",\n                    \"buildingNumber\": \"51\",\n                    \"postCode\": \"42-202\",\n                    \"department\": \"\",\n                    \"floor\": \"\"\n                }\n            },\n            \"identifiers\": {\n                \"idType\": \"LEI\",\n                \"idValue\": \"ultimateRecipientIdValue\",\n                \"issuer\": \"ultimateRecipientIssuer\"\n            }\n        }\n    },\n    \"sender\": {\n        \"accountNumber\": \"{{senderAccountNumber}}\",\n        \"name\": \"Adam Nowak\",\n        \"nameAddressStructured\": {\n            \"addressStructured\": {\n                \"countryCode\": \"PL\",\n                \"townName\": \"Warszawa\",\n                \"townLocationName\": \"\",\n                \"districtName\": \"\",\n                \"countrySubDivision\": \"\",\n                \"postBox\": \"\",\n                \"subDepartment\": \"\",\n                \"room\": \"\",\n                \"buildingName\": \"\",\n                \"streetName\": \"Ustawy\",\n                \"buildingNumber\": \"4\",\n                \"postCode\": \"00-123\",\n                \"department\": \"\",\n                \"floor\": \"\"\n            },\n            \"name\": \"AdresSender\"\n        },\n        \"identifiers\": {\n            \"idType\": \"LEI\",\n            \"idValue\": \"senderIdValue\",\n            \"issuer\": \"senderIssuer\"\n        },\n        \"ultimateSender\": {\n            \"nameAddressStructured\": {\n                \"name\": \"AdresUltimateSender\",\n                \"addressStructured\": {\n                    \"countryCode\": \"PL\",\n                    \"townName\": \"Kielce\",\n                    \"townLocationName\": \"\",\n                    \"districtName\": \"\",\n                    \"countrySubDivision\": \"\",\n                    \"postBox\": \"\",\n                    \"subDepartment\": \"\",\n                    \"room\": \"\",\n                    \"buildingName\": \"\",\n                    \"streetName\": \"Wrzosowa\",\n                    \"buildingNumber\": \"3\",\n                    \"postCode\": \"25-211\",\n                    \"department\": \"\",\n                    \"floor\": \"\"\n                }\n            },\n            \"identifiers\": {\n                \"idType\": \"LEI\",\n                \"idValue\": \"ultimateSenderIdValue\",\n                \"issuer\": \"ultimateSenderIssuer\"\n            }\n        }\n    },\n    \"transferData\": {\n        \"description\": \"Transfer\",\n        \"amount\": \"0.01\",\n        \"executionDate\": \"{{executionDate}}\",\n        \"currency\": \"{{currency}}\",\n        \"additionalFields\": {\n            \"bicOrSwift\": \"DABAIE2D\",\n            \"reference\": \"dummy-reference\",\n            \"KS\": \"1234\",\n            \"VS\": \"5678\",\n            \"SS\": \"90\"\n        }\n    },\n    \"deliveryMode\": \"STANDARD_D1\",\n    \"system\": \"ELIXIR\",\n    \"hold\": false,\n    \"executionMode\": \"IMMEDIATE\",\n    \"splitPayment\": true,\n    \"transactionInfoSp\": {\n        \"spInvoiceNumber\": \"FVS-01-01-2020-0001\",\n        \"spTaxIdentificationNumber\": \"5512265909\",\n        \"spTaxAmount\": \"0.23\",\n        \"spDescription\": \"Split payment\"\n    }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/payments/domestic",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"payments",
										"domestic"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPLIT PAYMENT] Retrieve accessToken for payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setGlobalVariable(\"accessToken\", jsonData.access_token);",
											"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token);",
											"console.log(jsonData.access_token)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en-US"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "Send-Date",
										"value": "{{sendDate}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "PSU-Session",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{clientId}}\",\n  \"refresh_token\":\"{{refreshToken}}\",\n  \"grant_type\":\"refresh_token\",\n  \"redirect_uri\":\"https://tpp-redirect-uri.com\",\n  \"scope\":\"pis\",\n  \"scope_details\":{\n    \"privilegeList\":[\n      { \n        \"pis:payment\":{\n          \"scopeUsageLimit\": \"MULTIPLE\",\n          \"aspspPaymentId\":\"{{aspspPaymentId}}\"\n        }\n      }\n    ],\n    \"scopeGroupType\":\"PIS\",\n    \"consentId\":\"{{tppConsentId}}\",\n    \"scopeTimeLimit\":\"{{scopeTimeLimit}}\",\n    \"throttlingPolicy\":\"PSD2_REGULATORY\"\n  }\n}"
								},
								"url": {
									"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
									"host": [
										"{{xs2aUri}}"
									],
									"path": [
										"{{bankId}}",
										"v3",
										"auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SPLIT PAYMENT] Retrieve payment status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.variables.get(\"jwsInternalScript\"));",
											"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Client-ID",
										"value": "{{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "Accept-Encoding",
										"value": "Gzip, deflate"
									},
									{
										"key": "Accept-Language",
										"value": "en"
									},
									{
										"key": "JWS-Signature",
										"value": "{{jwsSignature}}"
									},
									{
										"key": "TPP-ID",
										"value": "{{tppId}}"
									},
									{
										"key": "TPP-Request-ID",
										"value": "{{tppRequestId}}"
									},
									{
										"key": "Send-Date",
										"value": "{{sendDate}}"
									},
									{
										"key": "PSU-User-Agent",
										"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
									},
									{
										"key": "PSU-IP-Address",
										"value": "193.41.230.87"
									},
									{
										"key": "PSU-IP-Port",
										"value": "23456"
									},
									{
										"key": "PSU-Session",
										"value": "true",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{xs2aUri}}{{statusUrl}}",
									"host": [
										"{{xs2aUri}}{{statusUrl}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AIS",
			"item": [
				{
					"name": "Retrieve authorization URI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"authorizationRedirectUri\", jsonData.authorizationRedirectUri);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var now = require('moment');",
									"var uuid = require('uuid');",
									"",
									"pm.globals.set(\"executionDate\", now().format(\"YYYY-MM-DD\"));",
									"var nextDay = (Date.now() + 86400000);",
									"pm.globals.set(\"scopeTimeLimit\", new Date(nextDay).toISOString());",
									"pm.globals.set(\"tppConsentId\", uuid.v4());",
									"",
									"pm.globals.set(\"state\", require('uuid').v4());",
									"",
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0."
							},
							{
								"key": "PSU-IP-Address",
								"value": "193.41.230.87"
							},
							{
								"key": "PSU-IP-Port",
								"value": "23456"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"response_type\": \"code\",\n    \"client_id\": \"{{clientId}}\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\",\n    \"scope\": \"ais-accounts\",\n    \"state\": \"{{state}}\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"ais-accounts:accounts\": {}\n            }\n        ],\n        \"scopeGroupType\": \"AIS_ACCOUNTS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
						},
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/authorize",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"auth",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve accessToken for account list retrieval",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setGlobalVariable(\"accessToken\", jsonData.access_token)",
									"postman.setGlobalVariable(\"accountId\", jsonData.scope_details.privilegeList[0].accountId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{clientId}}\",\n    \"code\": \"{{authorizationCode}}\",\n    \"grant_type\": \"authorization_code\",\n    \"redirect_uri\": \"https://tpp-redirect-uri.com\"\n}"
						},
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"accountNumber\", jsonData.accounts[0].accountNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Client-ID",
								"value": "{{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/accounts",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange token to AIS scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"postman.setGlobalVariable(\"accessToken\", jsonData.access_token)",
									"postman.setGlobalVariable(\"refreshToken\", jsonData.refresh_token)",
									"postman.setGlobalVariable(\"accountId\", jsonData.scope_details.privilegeList[0].accountId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"exchange_token\": \"{{accessToken}}\",\n    \"grant_type\": \"exchange_token\",\n    \"scope\": \"ais\",\n    \"scope_details\": {\n        \"privilegeList\": [\n            {\n                \"accountNumber\": \"{{accountNumber}}\",\n                \"ais:accountDetails\": {},\n                \"ais:transactions\": {\n                    \"maxAllowedHistoryLong\": 1,\n                    \"transactionStatus\": [\n                        \"DONE\"\n                    ]\n                },\n                \"ais:transactionDetails\": {}\n            }\n        ],\n        \"scopeGroupType\": \"AIS\",\n        \"consentId\": \"{{tppConsentId}}\",\n        \"scopeTimeLimit\": \"{{scopeTimeLimit}}\",\n        \"throttlingPolicy\": \"PSD2_REGULATORY\"\n    }\n}"
						},
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/auth/token",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Client-ID",
								"value": "{{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/accounts/{{accountId}}",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"accounts",
								"{{accountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transaction details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Client-ID",
								"value": "{{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/accounts/{{accountId}}/transactions/{{aspspTransactionId}}",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"accounts",
								"{{accountId}}",
								"transactions",
								"{{aspspTransactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get transaction list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Client-ID",
								"value": "{{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}"
							}
						],
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/accounts/{{accountId}}/transactions?transactionStatus=DONE",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"accounts",
								"{{accountId}}",
								"transactions"
							],
							"query": [
								{
									"key": "transactionStatus",
									"value": "DONE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "Client-ID",
								"value": "{{clientId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/consents/{{tppConsentId}}",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"consents",
								"{{tppConsentId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CAF",
			"item": [
				{
					"name": "Confirmation of the Availability of Funds",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"calculateDetachedJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), pm.environment.get(\"tppJwsCertUrl\"), pm.environment.get(\"tppJwsCertFingerprint\"), request);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Client-ID",
								"value": "{{clientId}}"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "Accept-Encoding",
								"value": "Gzip, deflate"
							},
							{
								"key": "Accept-Language",
								"value": "en"
							},
							{
								"key": "JWS-Signature",
								"value": "{{jwsSignature}}"
							},
							{
								"key": "TPP-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-ID",
								"value": "{{tppId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accountNumber\": \"{{senderAccountNumber}}\",\n    \"amount\": \"100.00\",\n    \"currency\": \"{{currency}}\"\n}"
						},
						"url": {
							"raw": "{{xs2aUri}}/{{bankId}}/v3/funds-confirmation",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"{{bankId}}",
								"v3",
								"funds-confirmation"
							]
						}
					},
					"response": []
				}
			],
			"description": "[Pozytywny] Weryfikacja dostępności środków na koncie tylko z wymagalnymi headerami i polami\na. TPP odpytuje XS2A o dostępność środków (request posiada tylko wymagane pola i headery)\nb. Oczekiwany rezultat: informacja o dostępności żądanej kwoty na zadanym numerze konta",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AS",
			"item": [
				{
					"name": "[REGISTER] Register an app using jwks keys",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"eval(pm.variables.get(\"jwsInternalScript\"));",
									"eval(pm.variables.get(\"uuidLibrary\"));",
									"",
									"pm.globals.set(\"tppRequestId\", uuidV1());",
									"",
									"",
									"var payload = \"{\\n\"",
									"            + \"  \\\"iss\\\": \\\"{{tppId}}\\\",\\n\"",
									"            + \"  \\\"jwks\\\": {\\n\"",
									"            + \"    \\\"keys\\\": [\\n\"",
									"            + \"      {\\n\"",
									"            + \"        \\\"kty\\\": \\\"RSA\\\",\\n\"",
									"            + \"        \\\"alg\\\": \\\"RS256\\\",\\n\"",
									"            + \"        \\\"x5u\\\": \\\"{{tppJwsCertUrl}}\\\",\\n\"",
									"            + \"        \\\"x5t#S256\\\": \\\"{{tppJwsCertFingerprint}}\\\"\\n\"",
									"            + \"      }\\n\"",
									"            + \"    ]\\n\"",
									"            + \"  },\\n\"",
									"            + \"  \\\"client_name\\\": \\\"My application\\\",\\n\"",
									"            + \"  \\\"sub_contact_email\\\": \\\"my_email@mbank.pl\\\",\\n\"",
									"            + \"  \\\"redirect_uris\\\": [\\n\"",
									"            + \"    \\\"https://tpp-redirect-uri.com\\\"\\n\"",
									"            + \"  ]\\n\"",
									"            + \"}\";",
									"",
									"var filledPayload = collectionFunctions.fillBodyTemplate(payload, pm.variables);",
									"",
									"var header = { \"alg\": \"RS256\", \"typ\": \"JWT\"};",
									"var jwsSignature = collectionFunctions.calculateJwsSignature(pm.environment.get(\"tppJwsPrivateKey\"), header, filledPayload);",
									"",
									"pm.globals.set(\"software_statement\", jwsSignature);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "en-US"
							},
							{
								"key": "TPP-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"software_statement\": \"{{software_statement}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{xs2aUri}}/v3/register/",
							"host": [
								"{{xs2aUri}}"
							],
							"path": [
								"v3",
								"register",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"collectionFunctions = {",
							"    calculateJwsSignatureWithCertUrl: function (privateKey, certFileUrl, certFingerprint, certKid, request) {",
							"        var header = { \"alg\": \"RS256\", \"typ\": \"JWT\", \"x5u\": certFileUrl, \"x5t#S256\": certFingerprint, \"kid\": certKid };",
							"        var jwsSignature = collectionFunctions.calculateJwsSignature(privateKey, header, request);",
							"        return collectionFunctions.convertToDetachedJwsSignature(jwsSignature);",
							"    },",
							"",
							"    calculateJwsSignature: function (privateKey, jwtHeader, request) {",
							"        var navigator = {};",
							"        var window = {};",
							"        eval(pm.environment.get(\"jwsLibrary\"));",
							"        return KJUR.jws.JWS.sign(jwtHeader.alg, JSON.stringify(jwtHeader), request, privateKey);",
							"    },",
							"",
							"    convertToDetachedJwsSignature: function (jwsSignature) {",
							"        var jwsSignatureParts = jwsSignature.split(\".\");",
							"        var detachedJwsSignature = jwsSignatureParts[0] + \"..\" + jwsSignatureParts[2];",
							"        return detachedJwsSignature;",
							"    },",
							"",
							"    fillBodyTemplate: function (requestToUpdate, variables) {",
							"        var elementsToReplace = requestToUpdate.match(/{{.+}}/g);",
							"",
							"        var updatedRequest = requestToUpdate;",
							"        elementsToReplace.forEach(function (entry) {",
							"            var variableName = entry.replace(\"{{\", \"\").replace(\"}}\", \"\");",
							"            updatedRequest = updatedRequest.replace(entry, variables.get(variableName));",
							"        });",
							"        return updatedRequest;",
							"    }",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set(\"sendDate\", new Date().toISOString());",
					"eval(pm.variables.get(\"uuidLibrary\"));",
					"pm.globals.set(\"tppRequestId\", uuidV1());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}